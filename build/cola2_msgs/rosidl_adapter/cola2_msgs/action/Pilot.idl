// generated from rosidl_adapter/resource/action.idl.em
// with input from cola2_msgs/action/Pilot.action
// generated code does not contain a copyright notice

#include "cola2_msgs/msg/GoalDescriptor.idl"

module cola2_msgs {
  module action {
    module Pilot_Goal_Constants {
      const uint64 DEPTH = 0;
      const uint64 ALTITUDE = 1;
      const uint64 BOTH = 2;
      const uint64 SECTION = 0;
      const uint64 ANCHOR = 1;
      const uint64 HOLONOMIC_KEEP_POSITION = 2;
    };
    @verbatim (language="comment", text=
      "Define the REQUEST")
    struct Pilot_Goal {
      @verbatim (language="comment", text=
        "Initial state")
      double initial_latitude;

      double initial_longitude;

      double initial_depth;

      @verbatim (language="comment", text=
        "Final state")
      double final_latitude;

      double final_longitude;

      double final_depth;

      double final_yaw;

      double final_altitude;

      @verbatim (language="comment", text=
        "Heave mode")
      uint64 heave_mode;

      @verbatim (language="comment", text=
        "Surge velocity")
      double surge_velocity;

      @verbatim (language="comment", text=
        "Tolerance")
      double tolerance_xy;

      @verbatim (language="comment", text=
        "Timeout")
      double timeout;

      @verbatim (language="comment", text=
        "Controller type")
      uint64 controller_type;

      @verbatim (language="comment", text=
        "Requester and priority")
      cola2_msgs::msg::GoalDescriptor goal;
    };
    module Pilot_Result_Constants {
      const uint64 SUCCESS = 0;
      const uint64 TIMEOUT = 1;
      const uint64 FAILURE = 2;
    };
    @verbatim (language="comment", text=
      "Define the RESULT")
    struct Pilot_Result {
      @verbatim (language="comment", text=
        "State")
      uint64 state;
    };
    @verbatim (language="comment", text=
      "Define a FEEDBACK")
    struct Pilot_Feedback {
      @verbatim (language="comment", text=
        "Errors")
      double distance_to_end;

      double cross_track_error;
    };
  };
};
